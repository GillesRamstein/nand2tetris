
// push argument 1
@1                  // (0)
D=A                 // (1)
@ARG                // (2)
A=M                 // (3)
A=A+D               // (4)
D=M                 // (5)
@SP                 // (6)
M=M+1               // (7)
A=M-1               // (8)
M=D                 // (9)

// pop pointer 1
@SP                 // (10)
M=M-1               // (11)
A=M                 // (12)
D=M                 // (13)
@4                  // (14)
M=D                 // (15)

// push constant 0
@0                  // (16)
D=A                 // (17)
@SP                 // (18)
M=M+1               // (19)
A=M-1               // (20)
M=D                 // (21)

// pop that 0
@0                  // (22)
D=A                 // (23)
@THAT               // (24)
A=M                 // (25)
D=D+A               // (26)
@13                 // (27)
M=D                 // (28)
@SP                 // (29)
M=M-1               // (30)
A=M                 // (31)
D=M                 // (32)
@13                 // (33)
A=M                 // (34)
M=D                 // (35)

// push constant 1
@1                  // (36)
D=A                 // (37)
@SP                 // (38)
M=M+1               // (39)
A=M-1               // (40)
M=D                 // (41)

// pop that 1
@1                  // (42)
D=A                 // (43)
@THAT               // (44)
A=M                 // (45)
D=D+A               // (46)
@13                 // (47)
M=D                 // (48)
@SP                 // (49)
M=M-1               // (50)
A=M                 // (51)
D=M                 // (52)
@13                 // (53)
A=M                 // (54)
M=D                 // (55)

// push argument 0
@0                  // (56)
D=A                 // (57)
@ARG                // (58)
A=M                 // (59)
A=A+D               // (60)
D=M                 // (61)
@SP                 // (62)
M=M+1               // (63)
A=M-1               // (64)
M=D                 // (65)

// push constant 2
@2                  // (66)
D=A                 // (67)
@SP                 // (68)
M=M+1               // (69)
A=M-1               // (70)
M=D                 // (71)

// sub
@SP                 // (72)
A=M-1               // (73)
D=M                 // (74)
A=A-1               // (75)
M=M-D               // (76)
@SP                 // (77)
M=M-1               // (78)

// pop argument 0
@0                  // (79)
D=A                 // (80)
@ARG                // (81)
A=M                 // (82)
D=D+A               // (83)
@13                 // (84)
M=D                 // (85)
@SP                 // (86)
M=M-1               // (87)
A=M                 // (88)
D=M                 // (89)
@13                 // (90)
A=M                 // (91)
M=D                 // (92)

// label MAIN_LOOP_START
(MAIN_LOOP_START)

// push argument 0
@0                  // (93)
D=A                 // (94)
@ARG                // (95)
A=M                 // (96)
A=A+D               // (97)
D=M                 // (98)
@SP                 // (99)
M=M+1               // (100)
A=M-1               // (101)
M=D                 // (102)

// if-goto COMPUTE_ELEMENT
@SP                 // (103)
M=M-1               // (104)
A=M                 // (105)
D=M                 // (106)
@COMPUTE_ELEMENT    // (107)
D;JNE               // (108)

// goto END_PROGRAM
@END_PROGRAM        // (109)
0;JMP               // (110)

// label COMPUTE_ELEMENT
(COMPUTE_ELEMENT)

// push that 0
@0                  // (111)
D=A                 // (112)
@THAT               // (113)
A=M                 // (114)
A=A+D               // (115)
D=M                 // (116)
@SP                 // (117)
M=M+1               // (118)
A=M-1               // (119)
M=D                 // (120)

// push that 1
@1                  // (121)
D=A                 // (122)
@THAT               // (123)
A=M                 // (124)
A=A+D               // (125)
D=M                 // (126)
@SP                 // (127)
M=M+1               // (128)
A=M-1               // (129)
M=D                 // (130)

// add
@SP                 // (131)
A=M-1               // (132)
D=M                 // (133)
A=A-1               // (134)
M=M+D               // (135)
@SP                 // (136)
M=M-1               // (137)

// pop that 2
@2                  // (138)
D=A                 // (139)
@THAT               // (140)
A=M                 // (141)
D=D+A               // (142)
@13                 // (143)
M=D                 // (144)
@SP                 // (145)
M=M-1               // (146)
A=M                 // (147)
D=M                 // (148)
@13                 // (149)
A=M                 // (150)
M=D                 // (151)

// push pointer 1
@4                  // (152)
D=M                 // (153)
@SP                 // (154)
M=M+1               // (155)
A=M-1               // (156)
M=D                 // (157)

// push constant 1
@1                  // (158)
D=A                 // (159)
@SP                 // (160)
M=M+1               // (161)
A=M-1               // (162)
M=D                 // (163)

// add
@SP                 // (164)
A=M-1               // (165)
D=M                 // (166)
A=A-1               // (167)
M=M+D               // (168)
@SP                 // (169)
M=M-1               // (170)

// pop pointer 1
@SP                 // (171)
M=M-1               // (172)
A=M                 // (173)
D=M                 // (174)
@4                  // (175)
M=D                 // (176)

// push argument 0
@0                  // (177)
D=A                 // (178)
@ARG                // (179)
A=M                 // (180)
A=A+D               // (181)
D=M                 // (182)
@SP                 // (183)
M=M+1               // (184)
A=M-1               // (185)
M=D                 // (186)

// push constant 1
@1                  // (187)
D=A                 // (188)
@SP                 // (189)
M=M+1               // (190)
A=M-1               // (191)
M=D                 // (192)

// sub
@SP                 // (193)
A=M-1               // (194)
D=M                 // (195)
A=A-1               // (196)
M=M-D               // (197)
@SP                 // (198)
M=M-1               // (199)

// pop argument 0
@0                  // (200)
D=A                 // (201)
@ARG                // (202)
A=M                 // (203)
D=D+A               // (204)
@13                 // (205)
M=D                 // (206)
@SP                 // (207)
M=M-1               // (208)
A=M                 // (209)
D=M                 // (210)
@13                 // (211)
A=M                 // (212)
M=D                 // (213)

// goto MAIN_LOOP_START
@MAIN_LOOP_START    // (214)
0;JMP               // (215)

// label END_PROGRAM
(END_PROGRAM)
