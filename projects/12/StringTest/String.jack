// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int strLength;
    field int arrSize;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let chars = Memory.alloc(maxLength);
        let strLength = 0;
        let arrSize = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(chars); // is this needed?
        do Memory.deAlloc(this);  // or this enough?
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return strLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < arrSize) {
            return chars[j];
        }
        return;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < arrSize) {
            let chars[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (strLength < arrSize) {
            let chars[strLength] = c;
            let strLength = strLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (strLength > 0) {
            let strLength = strLength - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, int, sign;
        var char c;

        let i = 0;
        let sign = 1;

        // check for negative sign
        if (chars[i] = 45) {
            let sign = -1;
            let i = 1;
        }

        while (i < 16) {
            let c = chars[i];
            // test if c is a digit: ascii [48 .. 57]
            if ((47 < c) & (c < 58)) {
                // d = c - 48
                let int = (10 * int) + (c - 48);
                let i = i + 1;
            } else {
                // break loop
                let i = 16;
            }
        }

        if (sign = 1) {
            return int;
        }
        return -int;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int int) {
        let strLength = 0;

        // handle negative numbers
        if (int < 0) {
            let int = -int;
            do appendChar(45);  // "-"
        }

        do String.intToString(int, this);
        return;
    }

    function String intToString(int int, String s) {
        var int lastDigit;
        var char charDigit;

        let lastDigit = String.mathMod(int, 10);
        let charDigit = 48 + lastDigit;

        if (int < 10) {
            // let strLength = 0;
            return s.appendChar(charDigit);
        } else {
            // remove last digit and call again
            if (strLength < arrSize) {
                // append digit character
                do String.intToString(int / 10, s);
                return s.appendChar(charDigit);
            } else {
                // exit if string array is full
                return;
            }
        }
    }

    /** Returns the new line character.*/
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character.*/
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character.*/
    function char doubleQuote() {
        return 34;
    }

    // should be in Math
    function int mathMod(int a, int n) {
        var int q;

        let q = a / n;
        return a - (q * n);
    }
}
