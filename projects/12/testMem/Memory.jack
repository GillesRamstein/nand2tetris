// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */


/**

Heap Management:

A segment on the heap consists of 2 header blocks, followed by n data blocks.
The first block contains the address to the next free segment on the heap.
The second block contains the size n of the current segment.
The third next n blocks contain the data of the segment.
The address of the third block of the segment is the address of the segment.

    Heap
    Segment-y: ...
    Segment-x: [address-2] -> ptr to next block
    Segment-x: [address-1] -> size N of block
    Segment-x: [address+0] -> data, Address of Segment x
    Segment-x: ...         -> data
    Segment-x: [address+n] -> data
    Segment-z: ...

 init | alloc | dealloc
    I   A   A   D   D
00: n   n   n   06  06
01: 8   4   1   1   1
02: .   .   .   .   .
03: .   .   R   R   n
04: .   .   1   1   1
05: .   .   x   x   .
06: .   R   R   n   03
07: .   3   3   3   3
08: .   x   x   .   .
09: .   x   x   .   .
10: .   x   x   .   .

*/

class Memory {
    static Array ram;
    static int nextFreeSegment;

    function void init() {
        let ram = 0;
        // init first heap segment:
        let ram[2048] = null;       // set ptr of first heap segment to null
        let ram[2049] = 14334;      // set size to heap-2 (screenBase-heapBase-2)
        let nextFreeSegment = 2050;   // pointer to first free heap segment
        return;
    }

    function int peek(int address) {
        return ram[address];
    }

    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    function int alloc(int size) {
        /* Allocate first possible segment */

        var int currentSegment;
        var int currentSegmentSize;
        var int newSegment;

        let currentSegment = nextFreeSegment;

        // iterate through free segments
        while (true) {
            let currentSegmentSize = ram[currentSegment-1];

            // test if segment fits perfectly
            if (size = currentSegmentSize) {
                // recyle current segment, remove it from free segments list
                let nextFreeSegment = ram[currentSegment-2];
                return currentSegment;
            }

            // carve a new segment from current one if possible
            if (currentSegmentSize > (size + 2)) {
                // update size current segment
                let currentSegmentSize = currentSegmentSize - (size + 2);
                let ram[currentSegment-1] = currentSegmentSize;

                // get address of newly carved segment
                let newSegment = currentSegment + currentSegmentSize + 2;
                // let ram[newSegment - 2] = -1;  // set dummy - optional
                let ram[newSegment - 1] = size; // write size of new segment
                return newSegment;
            }

            // try next free segment
            let currentSegment = ram[currentSegment-2];
        }
        return;
    }

    function void deAlloc(Array object) {
        /** Prepend recycled segment to list of free segments */
        let ram[object-2] = nextFreeSegment;  // set segment pointer to current list head
        let nextFreeSegment = object;  //  set current list head to object address
        return;
    }
}
