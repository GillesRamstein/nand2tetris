// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array bitMasks;
    static int row;
    static int col;
    static int color;

    /** Initializes the Screen. */
    function void init() {
        // true = -1 == black
        // false = 0 == white
        let color = -1;

        let bitMasks = Array.new(17);
        let bitMasks[0]  = 1;
        let bitMasks[1]  = 2;
        let bitMasks[2]  = 4;
        let bitMasks[3]  = 8;
        let bitMasks[4]  = 16;
        let bitMasks[5]  = 32;
        let bitMasks[6]  = 64;
        let bitMasks[7]  = 128;
        let bitMasks[8]  = 256;
        let bitMasks[9]  = 512;
        let bitMasks[10] = 1024;
        let bitMasks[11] = 2048;
        let bitMasks[12] = 4096;
        let bitMasks[13] = 8192;
        let bitMasks[14] = 16384;
        let bitMasks[15] = -32767 - 1;
        let bitMasks[16] = 0;

        return;
    }

    function void clearScreen() {
        var int i;

        let color = false;
        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        let color = true;
        return;
    }

    function void setColor(boolean b) {
        let color = b;
        // true = -1 == black
        // false = 0 == white
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int n_x, bitMask, addr;

        let n_x = x / 16;
        let bitMask = bitMasks[x - (16 * n_x)];  // r=x%16, bitMask=bitMasks[r]
        let addr = 16384 + n_x + (y * 32);
        if (color) {
            do Memory.poke(addr, (Memory.peek(addr) | bitMask));  // black
        } else {
            do Memory.poke(addr, (Memory.peek(addr) & ~bitMask));  // white
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, sx, sy, cond;

        if (y1 = y2) {
            if (x1 > x2) {
                return Screen.drawHorzLine(x2, x1, y1)
            ;}
            else {
                return Screen.drawHorzLine(x1, x2, y1)
            ;}
        }

        if (x1 > x2) {
            let dx = x1 - x2;
            let sx = -1;
            // let a = 511;
        } else {
            let dx = x2 - x1;
            let sx = 1;
            // let a = 0;
        }
        if (y1 > y2) {
            let dy = y1 - y2;
            let sy = -1;
            // let b = 255;
        } else {
            let dy = y2 - y1;
            let sy = 1;
            // let b = 0;
        }

        let a = 0;
        let b = 0;


        // (a*dy)-(b*dx)<0  <=>  (a*dx)<(b*dy)  <=> (a/dy)<(b/dx) 
        let cond = 0;
        while (true) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (cond < 0) {
                let a = a + sx;
                let cond = cond + dy;
            } else {
                let b = b + sy;
                let cond = cond - dx;
            }

            if ((a > dx) | (a < -dx) | (b > dy) | (b < -dy)) {
                return;
            }
        }
        return;
    }

    function void drawHorzLine(int x1, int x2, int y) {
        // set x2 > x1 where this is called!
        var int n1, n2;
        var int mask1, mask2;
        var int addr, last;

        let n1 = x1 / 16;  // first register with affected pixels
        let mask1 = bitMasks[x1 - (16 * n1) + 1] - 1;  // bitMap for first register
        let n2 = x2 / 16;  // last register with affected pixels
        let mask2 = bitMasks[x2 - (16 * n2) + 1] - 1;  // bitMap for last register

        let addr = 16384 + (32 * y);
        let last = addr + n2;

        // first block
        let addr = addr + n1;
        if (color) {
            do Memory.poke(addr, (Memory.peek(addr) | ~mask1));  // black
        } else {
            do Memory.poke(addr, (Memory.peek(addr) & mask1));  // white
        }

        // middle blocks
        let addr = addr + 1;
        while (addr < last) {
            do Memory.poke(addr, color);  // set or unset all 16 pixels
            let addr = addr + 1;
        }

        // last block
        if (color) {
            do Memory.poke(last, (Memory.peek(last) | mask2));  // black
        } else {
            do Memory.poke(last, (Memory.peek(last) & ~mask2));  // white
        }

        return;
    }

    function void drawRectangle(int x1, int y1, int x2, int y2) {
        let y2 = y2 + 1;
        while (y1 < y2) {
            do Screen.drawHorzLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x0, int y0, int r) {
        var int top, bot;
        var int x, dy, r2;

        if (r > 181) {
            return;
        }

        let r2 = r * r;
        let top = y0 - r + 1;
        let bot = y0 + r;

        while (top < bot) {
            let dy = y0 - top;
            let x = Math.sqrt(r2 - (dy * dy));
            do Screen.drawHorzLine(x0 - x, x0 + x, top);
            let top = top + 1;
        }
        return;
    }
}
