// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powerOfTwo;
    // idx  dec       hex          binary
    //  0:  1     | 0x0001 | 0000 0000 0000 0001
    //  1:  2     | 0x0002 | 0000 0000 0000 0010
    //  2:  4     | 0x0004 | 0000 0000 0000 0100
    //  3:  8     | 0x0008 | 0000 0000 0000 1000
    //  4:  16    | 0x0010 | 0000 0000 0001 0000
    //  5:  32    | 0x0020 | 0000 0000 0010 0000
    //  6:  64    | 0x0040 | 0000 0000 0100 0000
    //  7:  128   | 0x0080 | 0000 0000 1000 0000
    //  8:  256   | 0x0100 | 0000 0001 0000 0000
    //  9:  512   | 0x0200 | 0000 0010 0000 0000
    // 10:  1024  | 0x0400 | 0000 0100 0000 0000
    // 11:  2048  | 0x0800 | 0000 1000 0000 0000
    // 12:  4096  | 0x1000 | 0001 0000 0000 0000
    // 13:  8192  | 0x2000 | 0010 0000 0000 0000
    // 14:  16384 | 0x4000 | 0100 0000 0000 0000
    // 15: -32768 | 0x8000 | 1000 0000 0000 0000


    function void init() {
        var int n, pow2;

        let powerOfTwo = Array.new(16);
        let n = 0;
        let pow2 = 1;

        while (n < 16) {
            let powerOfTwo[n] = pow2;
            let n = n + 1;
            let pow2 = pow2 + pow2;
        }
        return;
    }


    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }


    function int multiply(int x, int y) {
        var int i, product, sign;

        let i = 0;
        let product = 0;
        let sign = 1;

        if (x < 0) {
            let x = -x;
            let sign = -sign;
        }
        if (y < 0) {
            let y = -y;
            let sign = -sign;
        }

        while (i < 16) {
            if (Math.bitIsSet(y, i)) {
                let product = product + x;
            }
            let x = x + x;
            let i = i + 1;
        }

        if (sign = 1) {
            return product;
        }
        return -product;
    }


    function boolean bitIsSet(int value, int bit) {
        return ((value & powerOfTwo[bit]) > 0);
    }


    function int divide(int x, int y) {
        var int q, t, result, sign;

        let sign = 1;
        if (x < 0) {
            let x = -x;
            let sign = -sign;
        }
        if (y < 0) {
            let y = -y;
            let sign = -sign;
        }

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        let t = Math.multiply(q, y);
        if (y > (x - t - t)) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        if (sign = 1) {
            return result;
        }
        return -result;
    }


    function int sqrt(int x) {
        var int low, root, high, pow;

        // handle negative numbers
        if (x < 0) {
            return 0;
        }

        // max sqrt from a 16 bit signed int
        if (x > 32760) {
            return 181;
        }

        let low = 0;
        let high = 181; // â‰ƒ sqrt(32767);
        while (true) {
            let root = Math.divide(low + high, 2);
            let pow = Math.multiply(root, root);
            if (pow = x) {
                return root;
            }
            if (pow > x) {
                let high = root;
            } else {
                let low = root;
            }
        }
        return root;
    }


    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
