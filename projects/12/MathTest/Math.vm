function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 0
pop local 0
push constant 1
pop local 1
label Math.init.WHILE_START.1
push local 0
push constant 16
lt
not
if-goto Math.init.WHILE_EXIT.1
push local 1
push static 0
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto Math.init.WHILE_START.1
label Math.init.WHILE_EXIT.1
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto Math.abs.IF_FALSE.1
push argument 0
neg
return
label Math.abs.IF_FALSE.1
push argument 0
return
function Math.multiply 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 1
pop local 2
push argument 0
push constant 0
lt
not
if-goto Math.multiply.IF_FALSE.1
push argument 0
neg
pop argument 0
push local 2
neg
pop local 2
label Math.multiply.IF_FALSE.1
push argument 1
push constant 0
lt
not
if-goto Math.multiply.IF_FALSE.2
push argument 1
neg
pop argument 1
push local 2
neg
pop local 2
label Math.multiply.IF_FALSE.2
label Math.multiply.WHILE_START.1
push local 0
push constant 16
lt
not
if-goto Math.multiply.WHILE_EXIT.1
push pointer 0
push argument 1
push local 0
call Math.bitIsSet 3
not
if-goto Math.multiply.IF_FALSE.3
push local 1
push argument 0
add
pop local 1
label Math.multiply.IF_FALSE.3
push argument 0
push argument 0
add
pop argument 0
push local 0
push constant 1
add
pop local 0
goto Math.multiply.WHILE_START.1
label Math.multiply.WHILE_EXIT.1
push local 2
push constant 1
eq
not
if-goto Math.multiply.IF_FALSE.4
push local 1
return
goto Math.multiply.IF_END.4
label Math.multiply.IF_FALSE.4
push local 1
neg
return
label Math.multiply.IF_END.4
function Math.bitIsSet 0
push argument 0
pop pointer 0
push argument 1
push static 0
push argument 2
add
pop pointer 1
push that 0
and
push constant 0
gt
return
function Math.divide 2
push argument 1
push argument 0
gt
not
if-goto Math.divide.IF_FALSE.1
push constant 0
return
label Math.divide.IF_FALSE.1
push pointer 0
push argument 0
push pointer 0
push argument 1
push constant 2
call Math.multiply 3
call Math.divide 3
pop local 0
push pointer 0
push local 0
push argument 1
call Math.multiply 3
pop local 1
push argument 1
push argument 0
push local 1
push local 1
add
sub
gt
not
if-goto Math.divide.IF_FALSE.2
push local 0
push local 0
add
return
label Math.divide.IF_FALSE.2
push local 0
push local 0
add
push constant 1
add
return
function Math.sqrt 3
push constant 0
pop local 0
push constant 181
pop local 2
label Math.sqrt.WHILE_START.1
push local 0
push local 2
lt
not
if-goto Math.sqrt.WHILE_EXIT.1
push pointer 0
push local 0
push local 2
add
push constant 2
call Math.divide 3
pop local 1
push pointer 0
push local 1
push local 1
call Math.multiply 3
push argument 0
gt
not
if-goto Math.sqrt.IF_FALSE.1
push local 1
push constant 1
sub
pop local 2
goto Math.sqrt.IF_END.1
label Math.sqrt.IF_FALSE.1
push local 1
pop local 0
label Math.sqrt.IF_END.1
goto Math.sqrt.WHILE_START.1
label Math.sqrt.WHILE_EXIT.1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math.max.IF_FALSE.1
push argument 0
return
label Math.max.IF_FALSE.1
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto Math.min.IF_FALSE.1
push argument 0
return
label Math.min.IF_FALSE.1
push argument 1
return
